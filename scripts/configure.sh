#!/bin/bash
# Live Transcripts Configure Script
# Complete setup and configuration for Live Transcripts

set -e

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

print_success() { echo -e "${GREEN}✓${NC} $1"; }
print_error() { echo -e "${RED}✗${NC} $1"; }
print_warning() { echo -e "${YELLOW}!${NC} $1"; }
print_info() { echo -e "${BLUE}ℹ${NC} $1"; }

# Configuration templates for each platform
create_macos_config() {
    cat << 'EOF'
# Live Transcripts Configuration - macOS
# Auto-generated by configure.sh
# Feel free to customize these settings

profile: macos

# All settings use sensible defaults from the macOS profile
# See config.example.yaml for customization options
EOF
}

create_linux_config() {
    cat << 'EOF'
# Live Transcripts Configuration - Linux
# Auto-generated by configure.sh
# Feel free to customize these settings

profile: linux

# All settings use sensible defaults from the Linux profile
# See config.example.yaml for customization options
EOF
}

create_windows_config() {
    cat << 'EOF'
# Live Transcripts Configuration - Windows
# Auto-generated by configure.sh
# Feel free to customize these settings

profile: windows

# All settings use sensible defaults from the Windows profile
# See config.example.yaml for customization options
EOF
}

# Check Python version
check_python() {
    if command -v python3 &> /dev/null; then
        PYTHON_VERSION=$(python3 -c 'import sys; print(".".join(map(str, sys.version_info[:2])))')
        PYTHON_MAJOR=$(echo $PYTHON_VERSION | cut -d. -f1)
        PYTHON_MINOR=$(echo $PYTHON_VERSION | cut -d. -f2)
        
        if [ "$PYTHON_MAJOR" -ge 3 ] && [ "$PYTHON_MINOR" -ge 9 ]; then
            print_success "Python $PYTHON_VERSION found"
            return 0
        else
            print_error "Python 3.9+ required (found $PYTHON_VERSION)"
            return 1
        fi
    else
        print_error "Python 3 not found"
        return 1
    fi
}

# Install system dependencies
install_dependencies() {
    local OS=$1
    
    case $OS in
        "Darwin")
            print_info "Checking macOS dependencies..."
            if ! command -v brew &> /dev/null; then
                print_error "Homebrew not found. Please install from https://brew.sh"
                exit 1
            fi
            if ! brew list portaudio &>/dev/null; then
                print_info "Installing portaudio..."
                brew install portaudio
            fi
            print_success "macOS dependencies ready"
            ;;
        "Linux")
            print_info "Checking Linux dependencies..."
            if command -v apt-get &> /dev/null; then
                # Debian/Ubuntu
                if ! dpkg -l | grep -q portaudio19-dev; then
                    print_info "Installing dependencies..."
                    sudo apt-get update
                    sudo apt-get install -y portaudio19-dev pulseaudio python3-pip git
                fi
            elif command -v pacman &> /dev/null; then
                # Arch Linux
                if ! pacman -Q portaudio &>/dev/null 2>&1; then
                    print_info "Installing dependencies..."
                    sudo pacman -S --needed portaudio pulseaudio python-pip git
                fi
            elif command -v dnf &> /dev/null; then
                # Fedora/RedHat
                if ! rpm -q portaudio-devel &>/dev/null 2>&1; then
                    print_info "Installing dependencies..."
                    sudo dnf install -y portaudio-devel pulseaudio python3-pip git
                fi
            else
                print_warning "Unknown Linux distribution. Please install: portaudio, pulseaudio"
            fi
            print_success "Linux dependencies ready"
            ;;
        "Windows")
            print_success "Windows has built-in audio support"
            ;;
    esac
}

# Setup Python environment
setup_python_env() {
    print_info "Setting up Python virtual environment..."
    
    if [ ! -d "venv" ]; then
        python3 -m venv venv
        print_success "Virtual environment created"
    else
        print_info "Virtual environment already exists"
    fi
    
    # Activate venv
    if [ -f "venv/bin/activate" ]; then
        source venv/bin/activate
    elif [ -f "venv/Scripts/activate" ]; then
        source venv/Scripts/activate
    else
        print_error "Could not find venv activation script"
        exit 1
    fi
    
    print_info "Installing Python packages..."
    pip install --upgrade pip
    pip install -e ".[dev]"
    print_success "Python packages installed"
}

# Setup API keys in .env file
setup_api_keys() {
    # First, handle .env file creation/existence
    if [ ! -f ".env" ]; then
        if [ -f ".env.example" ]; then
            cp .env.example .env
            print_success "Created .env file from template"
        else
            print_error "Missing .env.example file"
            exit 1
        fi
    else
        print_info ".env file found"
    fi
    
    # Check current API key status
    openai_valid=false
    google_valid=false
    
    # Read current values
    if [ -f ".env" ]; then
        source .env 2>/dev/null
        
        if [ -n "$OPENAI_API_KEY" ] && [ "$OPENAI_API_KEY" != "your-openai-api-key-here" ]; then
            openai_valid=true
        fi
        
        if [ -n "$GOOGLE_API_KEY" ] && [ "$GOOGLE_API_KEY" != "your-google-api-key-here" ]; then
            google_valid=true
        fi
    fi
    
    # Show current status
    echo
    print_info "API Key Status:"
    if [ "$openai_valid" = true ]; then
        masked_key="${OPENAI_API_KEY:0:7}...${OPENAI_API_KEY: -4}"
        echo "  $(echo -e "${GREEN}✓${NC}") OpenAI key: $masked_key (${#OPENAI_API_KEY} chars)"
    else
        echo "  $(echo -e "${RED}✗${NC}") OpenAI key: Not configured"
    fi
    
    if [ "$google_valid" = true ]; then
        masked_key="${GOOGLE_API_KEY:0:7}...${GOOGLE_API_KEY: -4}"
        echo "  $(echo -e "${GREEN}✓${NC}") Google key: $masked_key (${#GOOGLE_API_KEY} chars)"
    else
        echo "  $(echo -e "${RED}✗${NC}") Google key: Not configured"
    fi
    
    # If both keys are valid, ask if user wants to keep them
    if [ "$openai_valid" = true ] && [ "$google_valid" = true ]; then
        echo
        read -p "Keep existing API keys? (y/n) " -n 1 -r
        echo
        if [[ $REPLY =~ ^[Yy]$ ]]; then
            print_success "Keeping existing API keys"
            return
        fi
    fi
    
    # Prompt for new keys
    echo
    read -p "Configure API keys now? (y/n) " -n 1 -r
    echo
    
    if [[ ! $REPLY =~ ^[Yy]$ ]]; then
        if [ "$openai_valid" = false ] || [ "$google_valid" = false ]; then
            print_warning "You'll need to add API keys to .env before running Live Transcripts"
        fi
        return
    fi
    
    # Get OpenAI key
    echo
    if [ "$openai_valid" = true ]; then
        read -p "Enter new OpenAI API key (or press Enter to keep current): " NEW_OPENAI_KEY
    else
        read -p "Enter your OpenAI API key: " NEW_OPENAI_KEY
    fi
    
    # Get Google key
    if [ "$google_valid" = true ]; then
        read -p "Enter new Google AI API key (or press Enter to keep current): " NEW_GOOGLE_KEY
    else
        read -p "Enter your Google AI API key: " NEW_GOOGLE_KEY
    fi
    
    # Update .env file
    if [ -n "$NEW_OPENAI_KEY" ]; then
        # Use | as delimiter since API keys might contain /
        if [[ "$OSTYPE" == "darwin"* ]]; then
            sed -i '' "s|^OPENAI_API_KEY=.*|OPENAI_API_KEY=$NEW_OPENAI_KEY|" .env
        else
            sed -i "s|^OPENAI_API_KEY=.*|OPENAI_API_KEY=$NEW_OPENAI_KEY|" .env
        fi
        print_success "OpenAI API key updated"
    fi
    
    if [ -n "$NEW_GOOGLE_KEY" ]; then
        if [[ "$OSTYPE" == "darwin"* ]]; then
            sed -i '' "s|^GOOGLE_API_KEY=.*|GOOGLE_API_KEY=$NEW_GOOGLE_KEY|" .env
        else
            sed -i "s|^GOOGLE_API_KEY=.*|GOOGLE_API_KEY=$NEW_GOOGLE_KEY|" .env
        fi
        print_success "Google API key updated"
    fi
}

# Create platform config
create_platform_config() {
    local OS=$1
    
    # Check if config.yaml exists
    if [ -f "config.yaml" ]; then
        print_warning "config.yaml already exists"
        read -p "Overwrite with $OS defaults? (y/n) " -n 1 -r
        echo
        if [[ ! $REPLY =~ ^[Yy]$ ]]; then
            return
        fi
        
        # Backup existing config
        backup_name="config.yaml.backup.$(date +%Y%m%d_%H%M%S)"
        cp config.yaml "$backup_name"
        print_success "Backup created: $backup_name"
    fi
    
    case $OS in
        "Darwin")
            create_macos_config > config.yaml
            ;;
        "Linux")
            create_linux_config > config.yaml
            ;;
        "Windows")
            create_windows_config > config.yaml
            ;;
        *)
            print_error "Unsupported platform: $OS"
            exit 1
            ;;
    esac
    
    print_success "Created config.yaml with $OS profile"
}

# Detect audio setup
detect_audio_setup() {
    local OS=$1
    
    echo
    print_info "Detecting audio setup..."
    
    case $OS in
        "Darwin")
            # Check for BlackHole
            if system_profiler SPAudioDataType 2>/dev/null | grep -q "BlackHole"; then
                print_success "BlackHole audio driver detected"
            else
                print_warning "BlackHole not detected"
                print_info "Install with: brew install blackhole-2ch"
                print_info "See README for audio routing setup"
            fi
            ;;
        "Linux")
            # Check for PipeWire
            if command -v pw-cli &> /dev/null; then
                print_success "PipeWire detected"
                if pactl info 2>/dev/null | grep -q "PipeWire"; then
                    print_success "PipeWire is running"
                else
                    print_warning "PipeWire installed but not running"
                fi
            # Check for PulseAudio
            elif command -v pactl &> /dev/null; then
                print_success "PulseAudio detected"
            else
                print_warning "No audio server detected"
                print_info "Install PipeWire or PulseAudio for audio capture"
            fi
            ;;
        "Windows")
            print_info "Windows uses built-in WASAPI loopback"
            print_success "No additional audio drivers needed"
            ;;
    esac
}

# Show next steps
show_next_steps() {
    echo
    print_info "Next steps:"
    
    # Check if API keys are configured
    api_keys_configured=true
    source .env 2>/dev/null
    if [ -z "$OPENAI_API_KEY" ] || [ "$OPENAI_API_KEY" = "your-openai-api-key-here" ] ||
       [ -z "$GOOGLE_API_KEY" ] || [ "$GOOGLE_API_KEY" = "your-google-api-key-here" ]; then
        api_keys_configured=false
    fi
    
    if [ "$api_keys_configured" = false ]; then
        echo "  1. Add your API keys to .env file"
        echo "  2. Start Live Transcripts: ./scripts/start.sh"
        echo "  3. Open web interface: http://localhost:8765"
    else
        echo "  1. Start Live Transcripts: ./scripts/start.sh"
        echo "  2. Open web interface: http://localhost:8765"
    fi
    
    echo
    echo "Optional:"
    echo "  - Customize settings in config.yaml"
    echo "  - See config.example.yaml for all options"
    echo "  - Run ./scripts/check-env.sh to verify setup"
}

# Main
main() {
    echo "🎤 Live Transcripts Configure"
    echo "============================="
    echo
    
    # Check if we're in the right directory
    if [ ! -f "pyproject.toml" ] || [ ! -d "src/livetranscripts" ]; then
        print_error "Please run this script from the Live Transcripts project directory"
        exit 1
    fi
    
    # Detect OS
    OS=$(uname -s)
    case $OS in
        Darwin) OS_NAME="macOS" ;;
        Linux) OS_NAME="Linux" ;;
        MINGW*|CYGWIN*|MSYS*) OS_NAME="Windows"; OS="Windows" ;;
        *) OS_NAME="Unknown" ;;
    esac
    
    print_info "Detected platform: $OS_NAME"
    
    # Step 1: Check Python
    echo
    if ! check_python; then
        print_error "Please install Python 3.9 or higher"
        exit 1
    fi
    
    # Step 2: Install system dependencies
    echo
    install_dependencies $OS
    
    # Step 3: Setup Python environment
    echo
    setup_python_env
    
    # Step 4: Setup API keys
    echo
    setup_api_keys
    
    # Step 5: Create platform config
    echo
    create_platform_config $OS
    
    # Step 6: Run OS-specific configuration
    echo
    print_info "Running platform-specific configuration..."
    
    case $OS in
        "Darwin")
            if [ -f "scripts/configure-macos.sh" ]; then
                bash scripts/configure-macos.sh
            else
                detect_audio_setup $OS
            fi
            ;;
        "Linux")
            if [ -f "scripts/configure-linux.sh" ]; then
                bash scripts/configure-linux.sh
            else
                detect_audio_setup $OS
            fi
            ;;
        "Windows")
            if [ -f "scripts/configure-windows.sh" ]; then
                bash scripts/configure-windows.sh
            else
                detect_audio_setup $OS
            fi
            ;;
        *)
            detect_audio_setup $OS
            ;;
    esac
    
    # Step 7: Verify setup
    echo
    print_info "Verifying setup..."
    
    # Ensure virtual environment is active for verification
    if [ -f "venv/bin/activate" ]; then
        source venv/bin/activate
    elif [ -f "venv/Scripts/activate" ]; then
        source venv/Scripts/activate
    fi
    
    # Make sure we use the venv Python
    PYTHON_CMD="python"
    if [ -f "venv/bin/python" ]; then
        PYTHON_CMD="venv/bin/python"
    elif [ -f "venv/Scripts/python.exe" ]; then
        PYTHON_CMD="venv/Scripts/python.exe"
    fi
    
    if $PYTHON_CMD -c "import src.livetranscripts.main" 2>/dev/null; then
        print_success "Python modules imported successfully"
    else
        print_error "Failed to import Python modules"
        # Show the actual error for debugging
        if [ "$DEBUG" = "1" ]; then
            $PYTHON_CMD -c "import src.livetranscripts.main" 2>&1
        fi
    fi
    
    # Show next steps
    show_next_steps
    
    echo
    print_success "Configuration complete! 🎉"
    
    if [ "$OS" == "Darwin" ]; then
        echo
        print_warning "macOS users: Remember to set up BlackHole audio routing!"
        print_info "See README.md for detailed instructions"
    fi
}

# Run main
main "$@"